1. ACALL code address 
    (Absolute call within 2K byte page)

Instruction code:	A10 A9 A8 1 0001/
    	A7 A6 A5 A4 A3 A2 A1 A0
Operation:  	(PC)<-(PC)+2
	(SP)<-(SP)+1
	((SP))<- (PC0~7) 
	(SP)<-(SP)+1
	((SP))<- (PC8~15)
	(PC0~10)<-A0~10
Number  of bytes:	2
Number of cycles:	2
Flags : 	No 
Description: 	This instruction stores the program counter value (return address) in the stack following an increment operation. The program counter data PC0~ PCl0 following PC+2 is replaced by 11-bit page address data A0~ Al0. The destination address for this instruction must always be within the 2K byte page, but if the instruction is placed at address X7FEH or X7FFH, execution proceeds from the call address on the next page.






2. ADD A,#data 
    (Add immediate data)

Instruction code:	0010 0100/
    	I7 I6 I5 I4 I3 I2 I1 I0
Operation:  	(A)<-(A)+#data 
Number of bytes: 	2
Number of cycles: 	1
Flags:     	C  AC  F0 RS1 RS0 OV  Fl  P
              	?  ?                ?        ?
Description:	An 8-bit immediate data value is added to the accumulator. The result is placed in the accumulator and the flags are updated.

Example:  	ADD A,#07H
Instruction code:	0010 0100/0000 0111

	Before execution	After execution

	Accumulator	Accumulator
	0110 0010	0110 1001
3. 
ADD A,@Rr
    (Add indirect address)

Instruction code:	0010 011r  
Operation:	(A)<-(A)+((Rr))  r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags: 	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?  ?               ?       ?
Description:	The data memory location contents addressed by the register r are added to the accumulator. The result is placed in the accumulator and the flags are updated.

Example :	ADD A,@R0
Instruction code:	0010 0110

	Before execution	After execution

	Accumulator	Accumulator
 	0100 1101	1011 0110

	Register 0	Register 0
	0101 1100	0101 1100

	5CH	5CH
	0110 1001	0110 1001




4. ADD A,Rr 
        (Add register)

Instruction code:	0010 1 r2 r1 r0
Operation:	(A)<-(A)+(Rr)   r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?  ?               ?       ?
Description:	The register r contents are added to the accumulator. The result is placed in the accumulator and the flags are updated.

Example:  	ADD A,R6
Instruction code: 	0010 1110

	Before execution	After execution

	Accumulator	Accumulator
	0101 0100	1011 0001

	Register 6	Register 6
	0101 1101	0101 1101
5. 
ADD A,data address 
        (Add memory)

Instruction code:	0010 0101/
    	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <- (A) + (data address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?  ?                ?      ?
Description:	The specified data address contents are added to the accumulator. The result is placed in the accumulator and the flags are updated.

Example: 	ADD A,P1 
Instruction code: 	0010 0101/1001 0000

	Before execution	After execution

	Accumulator	Accumulator
	0111 0010	0011 1000

	Port 1(90H)	Port 1(90H)
	1100 0110	1100 0110




6. ADDC A, #data
    (Add carry plus immediate data to accumulator)

Instruction code:	0011 0100/
   	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(A) <- (A) + (C) + #data 
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?  ?                ?      ?
Description:	The carry flag is added to the accumulator, and an 8-bit immediate data is added to that result. The result is placed in the accumulator and the flags are updated.

Example:  	ADDC A,#76H 
Instruction code:	0011 0100/0111 0110

	Before execution	After execution

	Accumulator	Accumulator
	0101 1001	1101 0000

	Carry flag	Carry flag
	    1	    0
7. 
ADDC A,@Rr
  (Add carry plus indirect address to accumulator)

Instruction code:	 0011 011r
Operation:	(A)<-(A)+(C)+((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?  ?                ?      ?
Description:	The carry flag is added to the accumulator, and the contents of data memory location addressed by the register r contents are added to that result. The result is placed in the accumulator and the flags are updated.

Example:  	ADDC A,@R0
Instruction code:	0011 0110

	Before execution	After execution

	Accumulator	Accumulator
	1101 0101	0101 0000

	Register 0	Register 0
	0110 1011	0110 1011

	6BH	6BH
	0111 1011	0111 1011

	Carry flag	Carry flag
	   0	   1


8. ADDC A,Rr
  (Add carry plus register to accumulator)

Instruction code:	0011 1 r2 r1 r0

Operation:	(A)<- (A)+(C)+(Rr)   r=0-7
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?  ?                ?      ?
Description:	The carry flag is added to the accumulator, and the register r contents are added to that result. The result is placed in the accumulator and the flags are updated.

Example:	ADDC A,R2 
Instruction code:	0011 1010

	Before execution	After execution

	Accumulator	Accumulator
	0110 1000	1101 0111

	Register 2	Register 2
	0110 1110		0110 1110

	Carry flag	Carry flag
	    1	     0
9. 
ADDC A,data address 
     (Add carry plus memory to accumulator)

Instruction code:	0011 0101/
    	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <- (A) + (C) + (data address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?  ?                ?      ?
Description:	The carry flag is added to the accumulator, and the specified data address contents are added to that result. The result is placed in the accumulator and the flags are updated.

Example:	ADDC A,45H

Instruction code: 	0011 0101/0100 0101

	Before execution	After execution

	Accumulator		Accumulator
	0011 0011	1001 0010

	45H	45H
	0101 1110	0101 1110

	Carry flag	Carry flag
	   1	   0





10. AJMP code address 
     (Absolute jump within 2K byte page)

Instruction code:	Al0 A9 A8 0 0001/
   	A7 A6 A5 A4 A3 A2 A1 A0
Operation:	(PC)<-(PC)+2 
	(PC0~l0)<-A0~l0

Number of bytes:	2
Number of cycles:	2
Flags:	No
(PSW)
Description:	After an increment, the program counter PC0~PC10 is replaced by 11-bit page address data A0~Al0. The destination address for this instruction must always be within the 2K byte page, but if the instruction is placed at address X7FEH or X7FFH, execution proceeds from the jump address on the next page.
11. 
ANL A,#data
    (Logical AND immediate data to accumulator)

Instruction code:	0101 0100/
   	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(A)<-(A) AND #data
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The logical AND between an 8-bit immediate data value and the accumulator contents is determined. The result is stored in the accumulator and the flag is also updated.


Example:	ANL A,#0AH
Instruction code:	0101 0100/0000 1010

	Before execution	After execution

	Accumulator	Accumulator
	1011 1101	0000 1000





12. ANL A,@Rr
   (Logical AND indirect address to accumulator)

Instruction code:	0101 011 r
Operation:	(A)<-(A) AND ((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The logical AND between the accumulator contents and the data memory location contents addressed by the register r is determined. The result is stored in the accumulator and the flag is also updated.


Example:	ANL A,@R0

Instruction code:	0101 0110

	Before execution	After execution

	Accumulator	Accumulator
	1010 1110 	1010 1010

	Register 0	Register 0
	0101 1000	0101 1000

	RAM 58H	RAM 58H
	1111 1010	1111 1010
13. 
ANL A,Rr 
     (Logical AND register to accumulator)

Instruction code:	0101 1 r2 r1 r0
Operation:	(A)<-(A) AND (Rr)   r=0~7 
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The logical AND between the accumulator contents and the register r contents is determined. The result is stored in the accumulator and the flag is also updated.

Example:	ANL A,R5
Instruction code:	0101 1101

	Before execution	After execution

	Accumulator	Accumulator
	1101 1011	0101 0001

	Register 5	Register 5
	0101 0101	0101 0101




14. ANL A,data address 
    (Logical AND memory to accumulator)

Instruction code:	0101 0101/
  	a7 a6 a5 a4 a3 a2 a1 a0 
Operation:	(A)<-(A) AND (data address) 
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The logical AND between the accumulator contents and  the  specified  data  address  contents  is determined. The result is stored in the accumulator and the flag is also updated.

Example:  	ANL A,P1
Instruction code:	0101 0101/1001 0000

	Before execution	After execution

	Accumulator	Accumulator
	1110 0101	1010 0101

	Port 1	Port 1
	1010 1111	1010 1111
15. 
ANL C,bit address 
        (Logical AND bit to carry flag)

Instruction code:	1000 0010/
  	b7 b6 b5 b4 b3 b2 b1
Operation:	(C) <- (C) AND (bit address)
Number of bytes: 	2
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?
Description:	The logical AND between the carry flag and the specified bit address content is determined. The result is stored in the carry flag.

Example:  	ANL C,ACC.5
Instruction code:	1000 0010/1110 0101

	Before execution	After execution

	Carry flag	Carry flag
	    1	     0

	Accumulator	Accumulator
	100l 1010	1001 1010





16. ANL C,/bit address 
   (Logical AND complement bit to carry flag)

Instruction code:	1011 0000/
   	b7 b6 b5 b4 b3 b2 b1 b0
Operation:	(C) <- (C) AND /(bit address)
Number of bytes:	2
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?
Description:	The logical AND between the carry flag and the complement of specified bit address content is determined. The result is stored in the carry flag.

Example:  	ANL C,/P1.3
Instruction code:	1011 0000/1001 0011

	Before execution	After execution

	Carry flag	Carry flag
 	   1	     0	

	Port 1	Port 1
	0000 1010	0000 1010  
17. 
ANL data address,#data
     (Logical AND immediate data to memory)

Instruction code:	0101 OO11/
  	a7 a6 a5 a4 a3 a2 a1 a0 /
  	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(data address) <- (data address) AND #data
Number of bytes:	3
Number of cycles:	2
Flags:	No
(PSW)
Description:	The logical AND between an 8-bit immediate data value and the specified data address contents is determined. The result is stored in the specified data address.

Example:	ANL DPH,#0AAH
Instruction code:	0101 0011/1000 0011/1010 1010

	Before execution	After execution

	DPH	DPH
	1111 1111	1010 1010







18. ANL data address,A 
     (Logical AND accumulator to memory)

Instruction code:	01010010
Operation:	(data address) <- (data address) AND (A) 
Number of bytes:	2
Number of cycles:	1
Flags:	No
(PSW)
Description:	The logical AND between the accumulator and the specified data address contents is determined. The result is stored in the specified data address.

Example:  	ANL TCON,A 
Instruction code:	0101 0010/1000 1000

	Before execution	After execution

	Accumulator	Accumulator
	0101 1010	0101 1010

	TCON	TCON
	1011 0101	0001 0000

19.CJNE @Rr,#data,code address
  (Compare indirect address to immediate data, jump if not equal)

Instruction code:	1011 011 r/
 	I7 I6 I5 I4 I3 I2 I1 I0/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
	IF ((Rr)) != #data        	r = 0 or 1 
	THEN 
	  (PC) <- (PC) + relative offset
	IF((Rr)) < #data 		r=0 or 1
	THEN 
	  (C)<-l
	ELSE
	  (C)<-0
Number of bytes:	3
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?
Description:	The data memory location contents addressed by the register r contents are compared with an immediate data value. Control is shifted to a relative jump address if the compared data is not equal. If the compared data is equal, control is shifted to the next address following this instruction. The carry flag is set to 1 if the immediate data value is greater than the specified address contents, but is set to 0 if otherwise

Example:	CJNE @R1,#05H,TEST

	LOC	OBJ	SOURCE
	00B4	2155	TEST: AJMP TEST1
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0118	B70599 	COMP: CJNE @R1,#05H,TEST 
	011B	020500	OUT: LJMP OUT1
	  .	  .	  .
	  .	  .	  .
Instruction code:	1011 0111/0000 0101/1001 1001

 	Before execution 	After execution

	Register 1	Register 1 
	0011 0101	0011 0101

	35H	35H
	0010 1011	0010 1011

	Carry flag	Carry flag
	    1	    0

	Program counter	Program counter
	0000 0001/0001 1000	0000 0000/1011 0100

20. CJNE A,#data,code address
    (Compare immediate data to accumulator, jump if not equal)

Instruction code:	1011 0100/
  	I7 I6 I5 I4 I3 I2 I1 I0/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
	IF (A) != #data         
	THEN 
	   (PC) <- (PC) + relative offset
	IF(A) < #data 		
	THEN 
	  (C)<-l
	ELSE
	  (C)<-0
Number of bytes:	3
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?
Description:	The accumulator contents are compared with an immediate data value, and control is shifted to a relative jump address if the compared data is not equal. If the compared data is equal, control is shifted to the next address following this instruction. The carry flag is set to 1 if the immediate data value is greater than the accumulator contents, but is set to 0 if otherwise.

Example:	CJNE A,#0AH,SS1

	LOC 	OBJ	SOURCE 
	0064	FF	SS1: MOV R7,A
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	00C8	B40599	COMP: CJNE A,#0AH,SS1
	00CB	0D	INCR: INC R5
	  .	  .	  .
	  .	  .	  .
Instruction code:	1011 0100/0000 1010/1001 1001

	Before execution	After execution
 
	Accumulator	Accumulator 
	0101 0000	0101 0000

	Carry flag	Carry flag
	    1 	     0

	Program counter	Program counter
	0000 0000/1100 1000	0000 0000/0110 0100

21. CJNE A,data address,code address
    (Compare memory to accumulator, jump if not equal)

Instruction code:	1011 0101/
  	a7 a6 a5 a4 a3 a2 al a0/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
	IF (A) != (data address) 
	THEN 
	   (PC) <- (PC) + relative offset
	IF (A) < (data address)
	THEN 
	  (C)<-l
	ELSE
	  (C)<-0
Number of bytes:	3
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?
Description:	The accumulator contents are compared with the specified data address, and control is shifted to a relative jump address if the compared data is not equal. If the compared data is equal, control is shifted to the next address following this instruction. The carry flag is set to 1 if the specified data address contents are greater than the accumulator contents, but is set to 0 if otherwise.
	
Example:	CJNE A,50H,NEXT

	LOC	OBJ	SOURCE 
	10DC 	855044	COMP: CJNE A,50H,NEXT
	10DF	120100	CAL: LCALL  TEST
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	1123	14	NEXT: DEC A
	  .	  .	  .
	  .	  .	  .
Instruction code:	1011 0101/0101 0000/0100 0100

	Before execution	After execution

	50H	50H
	0101 1110	0101 1110

	Accumulator	Accumulator
	0010 0110	0010 0110

	Carry flag	Carry flag
	    0	    1

	Program counter	Program counter
	0001 0000/1101 1100	0001 0001/0010 0011

22. CJNE Rr,#data,code address
    (Compare immediate data to register, jump if not equal)

Instruction code:	1011 1 r2 rl r0/
  	I7 I6 I5 I4 I3 I2 I1 I0/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
	IF (Rr) != #data        	r = 0 or 7 
	THEN 
	  (PC) <- (PC) + relative offset
	IF(Rr) < #data 		r=0 or 7
	THEN 
	  (C)<-l
	ELSE
	  (C)<-0
Number of bytes:	3
Number cf cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?	
Description:	The register r contents are compared with an immediate data value, and control is shifted to a relative jump address if the compared data is not equal. If the compared data is equal, control is shifted to the next address following this instruction. The carry flag is set to 1   if the  immediate data value  is  greater than the register r contents, but is set to 0 if otherwise.

Example:	CJNE R4,#32H,COUNT

	LOC	OBJ	SOURCE
	0473	0C	COUNT: INC R4
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0482	BC32EE	COMP: CJNE R4,#32H,COUNT
	  .	  .	  .
	  .	  .	  .
Instruction code:	1011 1100/0011 0010/1110 1110

	Before execution	After execution

	Register 4	Register 4
	0000 0001	0000 0001

	Carry flag	Carry flag
	    1	    1

	Program counter	Program counter
	0000 0100/1000 0010	0000 0100/0111 0011

23. CLR A 
      (Clear accumulator)

Instruction code:	1110 0100
Operation:	(A) <-0
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The accumulator is cleared to 0. The flag is also updated.

Example:	CLR A
Instruction code:	1110 0100

	Before execution	After execution

	Accumulator	Accumulator
	1011 0101	0000 0000





24. CLR C 
    (Clear carry flag)

Instruction code:	1100 0011	
Operation:	(C)<-0
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	0
Description:	The carry flag is cleared to 0.

Example:	CLR C
Instruction code:	1100 0011


	Before execution	After execution

	Carry flag	Carry flag
	    1	    0

25. CLR bit address 
    (Clear bit)

Instruction code:	1100 0010/
  	b7 b6 b5 b4 b3 b2 b1 b0
Operation:	(bit address) <-0
Number of bytes:	2
Number of cycles:	1
Flags:	No
(PSW)
Description:	The specified bit address content is cleared to 0.

Example:	CLR P1.5
Instruction code:	1100 0010/1001 0101

	Before execution	After execution

	Port 1	Port 1
	1111 1111	1101 1111




26. CPL A 
    (Complement accumulator)

Instruction code:	1111 0100
Operation:	(A) <- /(A)
Number of bytes:	1
Number of cycles:	1
Flags:	No
(PSW)
Description:	The accumulator data 0 is set to 1, and 1 is set to 0.

Example:  	CPL A
Instruction code:	1111 0100

	Before execution	After execution

	Accumulator	Accumulator
	1101 0101	0010 1010

27. CPL C 
    (Complement carry flag) 

Instruction code:	1011 0011
Operation:	(C)<-  /(C)
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?
Description:	The carry flag is set to 1 if 0, and set to 0 if 1.

Example:  	CPL C
Instruction code:	1011 0011

	Before execution	After execution

	Carry flag	Carry flag
	     1 	     0

	Carry flag	Carry flag
	     0	     1




28. CPL bit address 
    (Complement bit)

Instruction code:	1011 0010/
	b7 b6 b5 b4 b3 b2 bl b0
Operation:	(bit address) <- /(bit address)
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The specified bit address content is set to 1 if 0, and set to 0 if 1.
Example:	CPL B.7
Instruction code:	1011 0010/1111 0111

	Before execution	After execution

 	B register 	B register
	0101 0111	1101 0111

29. DA A 
    (Decimal adjust accumulator)
 
Instruction code:	1101 0100
Operation:	IF (AC) =1 or (ACC0~3) >= 10
  	THEN 
 	   ACC<-ACC + 6
  	IF (C)=1 or (ACC4~7) >= 10
 	THEN
	   (C)<-1
 	   ACC <- ACC+60H 
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?                           ?
Description: 	The arithmetic operation result located in the accumulator following an addition between two 2-digit decimal numbers is converted to a normal decimal number. When the contents of accumulator bits 0 thru 3 (low nibble) are greater than 9, or when the auxiliary carry (AC) is 1, 6 is added to accumulator bit 0 thru 3. And if the contents of accumulator bits 4 thru 7 (high nibble) exceed 9, or if the result obtained by adding a carry from the lower order digits after compensation is greater than 9, or if the carry flag is 1, 6 is added to the data in accumulator bits 4 thru 7. The flag is also updated.

Example:  	DA A
Instruction code:	1101 0100

	Before execution	After execution

	Accumulator	Accumulator
	1011 0101	0001 0101

	C     AC 	C     AC
	0     0	1     0

	Before execution	After execution

	Accumulator	Accumulator
	0011 0001 	1001 0111

	C     AC	C     AC
	1     1	1     1

	Before execution	After execution

	Accumulator	Accumulator
	1001 1100 	0000 0010

	C     AC	C     AC
	0     0	1     0

30. DEC @Rr 
        (Decrement indirect address)

Instruction code:	0001 011 r
Operation:	((Rr))<-((Rr))-1  r=O or 1
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The contents of the data memory location addressed by the register r contents are decremented by 1.

Example:	DEC @R0
Instruction code:	0001 0110

	Before execution	After execution

	Register 0	Register 0
	0110 1010	0110 1011

	6AH	6AH
	1001 0000	1000 1111






31. DEC A 
    (Decrement accumulator)

Instruction code:	0001 0100
Operation:	(A)<-(A)-1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The accumulator contents are decremented by 1, and the flag is updated.

Example:	DEC A 
Instruction code:	0001 0100

  	Before execution	After execution

	Accumulator	Accumulator
 	1010 1000	1010 0111

32. DEC Rr 
    (Decrement register)

Instruction code:	0001 1 r2 r1 r0
Operation:	(Rr)<-(Rr)-1   r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	No
(PSW)
Description:	The register r contents are decremented by 1.

Example:	DEC R7
Instruction code:	0001 1111

	Before execution 	After execution

	Register 7	Register 7
	1000 0000	0111 1111






33. DEC data address 
        (Decrement memory)

Instruction code:	0001 0101/
   	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(data address) <- (data address) - 1
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The specified data address contents are decremented by 1.


Example:	DEC 5AH
Instruction code:	0001 0101/0101 1010

	Before execution		After execution

 	5AH	5AH
	1111 1111	1111 1110

34. DIV AB 
     (Divide accumulator by B) 

Instruction code:	1000 0100
Operation:	(A) quotient, (B) remainder <- (A)/(B)
Number of bytes:	1
Number of cycles:	4
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW) 	?                   ?       ?
Description:	The accumulator contents are divided by the contents of arithmetic operation register (B). The two data values are handled as integers without sign. The quotient is placed in the accumulator, and the remainder in the arithmetic operation register (B). The carry flag is always cleared, and the overflow flag (OV) is set to 1 if a division by 0 is executed. This flag is cleared in all other cases. In case of division by 0, the contents of the accumulator and the arithmetic operation register (B) remain unchanged.

Example:   	DIV AB (0AEH/7H=18H.....6H)
Instruction code:	1000 0100

	Before execution	After execution

	Accumulator	Accumulator
	1010 1110 	0001 1000

	B register	B register
	0000 0111	0000 0110



35. DJNZ Rr,Code address 
   (Decrement register, and jump if not zero)

Instruction code:	1101 1 r2 rl r0/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+ 2
	(Rr)<-(Rr)-1 	r=0~7
 	IF (Rr) != 0 
 	THEN 
 	   (PC) <- (PC) + relative offset
Number of bytes:	2
Number of cycles:	2
Flags:	No
(PSW)
Description:	The register r contents are decremented by 1.Control is shifted to a relative jump address if the register r contents are not 0 as a result of the decrement. Control is shifted to the next address following this instruction if the result is 0.

Example:	DJNZ R1, LOOP

	LOC	OBJ	SOURCE
	00FE	2F	LOOP: ADD A, R7
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	010B	D9F1	COUNT: DJNZ R1,LOOP
	  .	  .	  .
	  .	  .	  .
Instruction code:	1101 1001/1111 0001

	Before execution	After execution

	Register 1	Register 1
	0000 1000	0000 0111

	Program counter	Program counter
	0000 0001/0000 1011	0000 0000/1111 1110

36. DJNZ data address,Code address 
    (Decrement memory, and jump if not zero)

Instruction code:	1101 0101/
  	a7 a6 a5 a4 a3 a2 al a0/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
  	(data address) <- (data address) -1
  	IF (data address) != 0 
 	THEN 
 	    (PC) <- (PC) + relative offset
Number of bytes:	3
Number of cycles:	2
Flags:	No
(PSW)
Description:	The specified data address contents are decremented by 1. Control is shifted to a relative jump address if the data address contents are not 0 as a result of the decrement. Control is shifted to the next address following this instruction if the result is 0.

Example:	DJNZ 57H,LOOP1

	LOC	OBJ   	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	1033	A957	LOOP1: MOV R1,57H
	  .	  .		  .
	  .	  .		  .
	  .	  .		  .
	  .	  .		  .
	1095	D5579B	COUNT: DJNZ 57H,LOOP1
	  .	  .		  .
	  .	  .		  .
	  .	  .		  .
	  .	  .		  .
Instruction code:	1101 0101/0101 0111/1001 1011

	Before execution	After execution

	57H	57H
	0110 1011	0110 1010

	Program counter	Program counter 
	0001 0000/1001 0101	0001 0000/0011 0011

37. INC @Rr
    (lncrement indirect address)

Instruction code:	0000 011 r
Operation:	((Rr))<-((Rr))+1  r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The contents of the data memory location addressed by the register r contens are incremented by 1.


Example:	INC @R1
Instruction code:	0000 0111

	Before execution	After execution

	Register 1	Register 1
	0110 0101	0110 0101

	65H	65H
	0000 1111	0001 0000




38. INC A 
     (Increment accumulator)

Instruction code:	0000 0100
Operation:	(A)<-(A)+1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The accumulator contents are incremented by 1, and the flag is updated.

Example:	INC A
Instruction code:	0000 0100

	Before execution	After execution

	Accumulator	Accumulator
	1011 0111   	1011 1000

39. INC DPTR 
    (Increment data pointer)

Instruction code:	1010 0011
Operation:	(DPTR)<- (DPTR)+1
Number of bytes:	1
Number of cycles:	2
Flags:	No
 (PSW)
Description:	16-bit contents of data pointer (DPH/DPL) are incremented by 1.

Example:	INC DPTR 
Instruction code:	1010 0011

	Before execution	After execution

	DPH/DPL	DPH/DPL
	0110 1000/1111 1111	0110 1001/0000 0000

40. INC Rr 
    (Increment register)

Instruction code:	0000 1 r2 r1 r0
Operation:	(Rr)<-(Rr)+1  r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The register r contents are incremented by 1.

Example:	INC R5
Instruction code:	0000 1101

	Before execution	After execution

	Register 5 	Register 5
	1011 1111	1100 0000

41. INC data address 
    (Increment memory)

Instruction code:	0000 0101/
  	A7 a6 a5 a4 a3 a2 al a0
Operation:	(data address) <- (data address) +1
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The specified data address contents are incremented by 1.

Example:	INC P1
Instruction code:	0000 0101/1001 0000

	Before execution	After execution

	Port 1	Port 1
	0000 1111	0001 0000
42. JB bit address,Code address 
          (Jump if bit is set)

Instruction code:	0010 0000/
 	b7 b6 b5 b4 b3 b2 b1 b0/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
 	IF (bit address) = 1 
 	THEN 
 	   (PC) <- (PC) + relative offset
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Control is shifted to a relative jump address if the specified bit address content is 1.
 	Control is shifted to the next address following this instruction if the content is 0.

Example:	JB 34.3,ENTER

	LOC	OBJ	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0903	20134A	BITTS: JB 34.3,ENTER
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0950	ACA0	ENTER: MOV R4,0A0H
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
Instruction code:	0010 0000/0001 0011/0100 1010

	Before execution	After execution
	34	34
	0100 1000	0100 1000

	Program counter	Program counter
	0000 1001/0000 0011	0000 1001/0101 0000

43. JBC bit address,Code address 
     (Jump and clear if bit is set)

Instruction code:	0001 0000/
  	b7 b6 b5 b4 b3 b2 b1 b0/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+3
 	IF (bit address) = 1 
 	THEN
	  (bit address) <-0
	  (PC) <- (PC) + relative offset
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description: 	Control is shifted to a relative jump address if the specified bit address content is 1, and that bit is cleared to 0.
 	Control is shifted to the next address following this instruction if the content is 0.

Example:	JBC 46.1,COUNT4

	LOC	OBJ 	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	00DC  	C281 	COUNT4: CLR 128.1
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0136	1071A3	BTEST: JBC 46.1,COUNT4
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
Instruction code:	0001 0000/0111 0001/1010 0011

	Before execution	After execution

	46	46
	1010 1010	1010 1000

	Program counter	Program counter 
	0000 0001/0011 0110	0000 0000/1101 1100

44. JC Code address 
      (Jump if carry is set)

Instruction code:	0100 0000/
  	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+2
 	IF (C)=l 
 	THEN 
 	   (PC) <- (PC) + relative offset
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Control is shifted to a relative jump address if the carry flag is 1. Control is shifted to the next address following this instruction if the content is 0.

Example:	JC CARRY

	LOC	OBJ	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	16DC 	7110 	CHECK:  ACALL ADDR
	16DE	4015 	JMPC: JC CARRY
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	16F5	07	CARRY: INC @R1
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
Instruction code:	0100 0000/0001 0101

	Before execution 	After execution

	Carry flag	Carry flag
	     1	    1

	Program counter	Program counter
	0001 0110/1101 1110	0001 0110/1111 0101

45. JMP @A+DPTR 
   (Jump to sum of accumulator and data pointer)

Instruction code:	0111 0011
Operation:	(PC)<-(A)+(DPTR)
Number of bytes:	1
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The accumulator contents are added to the data pointer contents, and the resulting sum is stored in the program counter.

Example	JMP @A+DPTR
Instruction code:	0111 0011

	Before execution	After execution

	Accumulator	Accumulator
	1011 0110	1011 0110
 
	DPH/DPL         	DPH/DPL
	0010 1000/1100 1110	0010 1000/1100 1110                 

	Program counter	Program counter
	0001 0010/0010 1011	0010 1001/1000 0100

46. JNB bit address,Code address 
        (Jump if bit is not set)

Instruction code:	0011 0000/
 	b7 b6 b5 b4 b3 b2 b1 b0/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC) + 3 
 	IF (bit address) = 0 
 	THEN 
 	    (PC) <- (PC) + relative offset
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Control is shifted to a relative jump address if the specified bit address content is 0, but shifted to the next address following this instruction if the content is 1.

Example	JNB 37.3,EXIT

	LOC	OBJ	SOURCE 
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0835	302822	TEST: JNB 37.3,EXIT
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	085A	E6	EXIT: MOV A,@R0
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .

Instruction code:	0011 0000/0010 1011/0010 0010

	Before execution	After execution

	37	37
	0011 0111	0011 0111

	Program counter	Program counter
	0000 1000/0011 0101	0000 1000/0101 1010

47. JNC Code address 
    (Jump if carry is not set)

Instruction code:	0101 0000/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+2
 	IF (C)=0
 	THEN
 	  (PC) <- (PC) + relative offset
Number of bytes:	2
Number of cycles:	2
Flags:	No
(PSW)
Description:	Control is shifted to a relative jump address if the carry flag is 0. Control is shifted to the next address following this instruction if the content is 1.

Example	JNC EXIT

	LOC 	OBJ 	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0835	5022	TEST: JNC EXIT
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0859	85E0F0	EXIT: MOV B,ACC
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
Instruction code:	0101 0000/0010 0010

	Before execution	After execution

 	Carry flag	Carry flag
	   0	   0

	Program counter	Program counter
	0000 1000/0011 0101	0000 1000/0101 1001

48. JNZ Code address 
     (Jump if accumulator is not 0)

Instruction code:	0111 0000/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+2
 	IF (A)!=0
 	THEN 
 	   (PC) <- (PC) + relative offset
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Control is shifted to a relative jump address if the accumulator contents are not 0. Control is shifted to the next address following this instruction if the contents are 0.

Example:	JNZ TEST

	LOC	OBJ	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	00FC	7030	CHECK: JNZ TEST
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	012E	FB	TEST: MOV R3,A
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
Instruction code:	0111 0000/0011 0000

	Before execution	After execution

	Accumulator	Accumulator
	0101 1101	0101 1101

	Program counter	Program counter 
	0000 0000/1111 1100	0000 0001/0010 1110

49. JZ Code address 
        (Jump if accumulator is 0)

Instruction code:	0110 0000/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+ 2 
 	IF (A)=0 
 	THEN 
 	  (PC) <- (PC) + relative offset
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Control is shifted to a relative jump address if the accumulator contents are 0. Control is shifted to the next address following this instruction if the contents are not 0.

Example	JZ EMPTY

	LOC	OBJ	SOURCE
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	0099	04	EMPTY: INC A
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	00CA	60CD	CHECK: JZ EMPTY
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
	  .	  .	  .
Instruction code:	0110 0000/1100 1101

	Before execution	After execution

	Accumulator	Accumulator
	0000 0000	0000 0000

	Program counter	Program counter
	0000 0000/1100 1010	0000 0000/1001 1001

50. LCALL Code address 
        (Long call)

Instruction code: 	0001 0010/
 	A15 A14 A13 A12 All A10 A9 A8/
 	A7 A6 A5 A4 A3 A2 Al A0
Operation:	(PC)<-(PC)+3
 	(SP)<- (SP)+1
 	((SP))<- (PC0~7)
 	(SP)<-(SP)+1
 	((SP))<- (PC8~15)
 	(PC0~15)<- A0~15
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The contents of the program counter (return address) are stored in the stack following an increment. Call address A0~l5 specified by operand are placed in the program counter PC0~15.
 	This instruction is capable of call jump to anywhere within the entire range of 64K words.




51. LJMP Code address 
      (Long jump)

Instruction code:	0000 0010/
 	A15 A14 A13 Al2 All Al0 A9 A8/
 	A7 A6 A5 A4 A3 A2 A1 A0
Operation:	(PC0~15)<-A0~15
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Jump addresses A0~15 specified by operand are placed in the program counter PC0~15.
 	This instruction is capable of jump to anywhere within the entire range of 64K words.

52. MOV @Rr,#data 
      (Move immediate data to indirect address)

Instruction code:	0111 011 r/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	((Rr))<- #data  r = 0 or 1
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	An 8-bit immediate data value is copied to the data memory location addressed by the register r contents.


Example:	MOV @R1,#0AAH
Instruction code:	0111 0111/1010 1010

	Before execution	After execution

	Register 1	Register 1
	0110 1010	0110 1010

	6AH	6AH
	0111 0111	1010 1010



53. MOV @Rr,A 
       (Move accumulator to indirect address)

Instruction code:	1111 011 r
Operation:	((Rr))<- (A)   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The accumulator contents are copied to the data memory location addressed by the register r contents.

Example	MOV @R0,A
Instruction code:	1111 0110

	Before execution 	After execution

	Register 0 	Register 0
	0110 1100	0110 1100

	6CH	6CH
	1011 1011	0101 0101

	Accumulator	Accumulator
	0101 0101	0101 0101

54. MOV @Rr,data address 
        (Move memory to indirect address)

Instruction code:	1010 011 r/
 	A7 a6 a5 a4 a3 a2 al a0
Operation:	((Rr))<- (data address)    r = 0 or 1 
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The specified data address contents are copied to the data memory location addressed by the register r contents.

Example:	MOV @R0,ACC 
Instruction code:	1010 0110/1110 0000

	Before execution	After execution

	Accumulator	Accumulator
	0101 0111	0101 0111

	Register 0	Register 0
	0111 0010	0111 0010

	72H	72H
	0011 1100	0101 0111


55. MOV A,#data 
    (Move immediate data to accumulator)

Instruction code:	0111 0100/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(A) <- #data
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	An 8-bit immediate data value is copied to the accumulator, and the flag is updated.

Example:	MOV A,#05H
Instruction code:	0111 0100/0000 0101

	Before execution	After execution

	Accumulator	Accumulator
	0111 0111	0000 0101

56. MOV A,@Rr 
    (Move indirect address to accumulator)

Instruction code:	1110 011 r
Operation:	(A)-((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The data memory location contents addressed by the register r contents are copied to the accumulator, and the flag is updated.

Example:	MOV A,@R0 
Instruction code:	1110 0110

	Before execution	After execution

	Register 0	Register 0
	0111 0010	0111 0010

	72H	72H
	1011 0111	1011 0111

	Accumulator	Accumulator
	0100 1100	1011 0111




57. MOV A,Rr 
       (Move register to accumulator)

Instruction code:	1110 1 r2 r1 r0
Operation:	(A)<-(Rr)  r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The register r contents are copied to the accumulator, and the flag is updated.

Example:	MOV A,R6
Instruction code:	1110 1110

	Before execution	After execution

	Register 6	Register 6
	1010 0101	1010 0101

	Accumulator	Accumulator
	0000 1111 	1010 0101

58. MOV A,data address 
         (Move memory to accumulator)

Instruction code:	1110 0101/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <- (data address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The specified data address contents are copied to the accumulator, and the flag is updated.

Example:	MOV A,P1
Instruction code:	1110 0101/1001 0000

	Before execution	After execution

	Port 1	Port 1
	0110 0111	0110 0111

	Accumulator	Accumulator
	0000 0010	0110 0111




59. MOV C,bit address 
         (Move bit to carry flag)

Instruction code:	1010 0010/
 	b7 b6 b5 b4 b3 b2 b1 b0
Operation:	(C) <- (bit address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?
Description:	The specified bit address content is copied to the carry flag.

Example:	MOV C,P3.4
Instruction code:	1010 0010/1011 0100

	Before execution	After execution

	Port 3	Port 3
	0001 0110	0001 0110

	Carry flag	Carry flag
	     0	    1

60. MOV DPTR,#data 
        (Move immediate data to data pointer)

Instruction code:	1001 0000/
 	I15 114 I13 I12 I11 I10 I9 I8/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(DPTR) <- #data
 	(DPH)<-I8~15
 	(DPL)<-I0~7
Number of bytes:	3
Number of cycles:	2
Flags:	No
(PSW)
Description:	A 16-bit immediate data value is copied to the data pointer (DPH / DPL).

Example:	MOV DPTR,#0AF5H
Instruction code:	1001 0000/0000 1010/1111 0101

	Before execution	After execution

	DPH/DPL	DPH/DPL
	1111 0000/0000 1111	0000 1010/1111 0101




61. MOV Rr,#data 
          (Move immediate data to register)

Instruction code:	0111 1 r2 r1 r0/
 	I7 I6 I5 I4 I3 I2 I1 I0

Operation:	(Rr) <- #data   r=0~7
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	An 8-bit immediate data value is copied to the register

Example:	MOV R5,#0AH
Instruction code:	0111 1101/0000 1010

	Before execution	After execution

	Register 5	Register 5
	1010 1011	0000 1010

62. MOV Rr,A 
        (Move accumulator to register)

Instruction code:	1111 1 r2 r1 r0
Operation:	(Rr)<- (A)  r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	No
(PSW)
Description:	The accumulator contents are copied to the register r.

Example:	MOV R1,A
Instruction code:	1111 1001

	Before execution	After execution

	Register 1	Register 1
	0111 1110	1001 1001

	Accumulator	Accumulator
	1001 1001	1001 1001




63. MOV Rr,data address 
       (Move memory to register)

Instruction code:	1010 1 r2 rl r0/
 	a7 a6 a5 a4 a3 a2 al a0
Operation:	(Rr) <- (data address)   r=0~7
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The specified data address contents are copied to the register r.

Example:	MOV R0,5AH
Instruction code:	1010 1000/0101 1010

	Before execution	After execution

	Register 0	Register 0
	0111 1011	10l0 1010

	5AH	5AH
	1010 1010	1010 1010

64. MOV bit address,C 
           (Move carry flag to bit)

Instruction code:	1001 0010/
 	b7 b6 b5 b4 b3 b2 b1 b0
Operation:	(bit address) <- (C)
Number of bytes:	2
Number of cycles:	2
Flags:	No
(PSW)
Description:	The carry flag content is copied to the specified bit address.

Example:	MOV P1.4,C
Instruction code:	1001 0010/1001 0100

	Before execution	After execution

	Port 1	Port 1
	1111 1111	1110 1111

	Carry flag	Carry flag
	    0	    0


65. MOV data address,#data 
       (Move immediate data to memory)

Instruction code:	0111 0101/
 	a7 a6 a5 a4 a3 a2 al a0/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(data address) <- #data
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	An 8-bit immediate data value is copied to the specified data address.

Example:	MOV TCON,#50H
Instruction code:	0111 0101/1000 1000/0101 0000

	Before execution	After execution

	TCON (88H)	TCON (88H)
	0000 0000	0101 0000

66. MOV data address,@Rr
         (Move indirect address to memory)

Instruction code: 	1000 011 r/
 	a7 a6 a5 a4 a3 a2 al a0
Operation:	(data address)<-((Rr))   r =0 or 1
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The data memory location contents addressed by the register r contents are copied to the specified data address.

Example	MOV ACC,@R1
Instruction code:	1000 0111/1110 0000

	Before execution	After execution

	Accumulator	Accumulator
	0000 0000	0110 1111

	Register 1	Register 1
	0010 0101	0010 0101

	25H	25H
	0110 1111	0110 1111



67. MOV data address,A 
            (Move accumulator to memory)

Instruction code:	1111 0101/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(data address) <- (A)
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The accumulator contents are copied to the specified data address.

Example:	MOV P3,A
Instruction code:	1111 0101/1011 0000

	Before execution	After execution

	Port 3	Port 3
	1111 1111	1110 1100

	Accumulator	Accumulator
	1110 1100	1110 1100

68. MOV data address,Rr 
          (Move register to memory)

Instruction code:	1000 1 r2 r1 r0/
 	a7 a6 a5 a4 a3 a2 al a0
Operation:	(data address) <- (Rr)   r=0~7
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description: 	The register r contents are copied to the specified data address.

Example:	MOV 6BH,R2
Instruction code:	1000 1010/0110 1011

	Before execution	After execution

	6BH	6BH
	1011 0110	0101 0101

	Register 2	Register 2
	0101 0101	0101 0101




69. MOV data address 1,data address 2 
         (Move memory to memory)

Instruction code:	1000 0101/
 	a27 a26 a25 a24 a23 a22 a21 a20/
 	a17 a16 a15 a14 a13 a12 a11 a10
Operation:	(data address 1) <- (data address 2)
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The source data address (data address 2) contents are copied to the destination data address (data address 1)

Example:	MOV ACC,P1
Instruction code:	1000 0101/1001 0000/1110 0000

	Before execution	After execution

	Port 1	Port 1
	1011 0100  	1011 0100

	Accumulator	Accumulator
	0111 1011	1011 0100

70. MOVC A,@A+DPTR
    (Move code memory offset from data pointer to accumulator)

Instruction code:	1001 0011
Operation:	(A)<-((A) + (DPTR))
Number of bytes:	1
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The data pointer contents are added to the accumulator contents, and after temporary storage of the sum in program counter, the ROM data contents specified by the program counter are stored in the accumulator. The program counter contents are then restored to former contents, and the flag is also updated.

Example  MOVC A,@A+DPTR
Instruction code:	1001 0011

	Before execution	After execution

	Accumulator	Accumulator
	1111 0111	0101 0101

	DPH/DPL	DPH/DPL
	0000 0001/0000 1001	0000 0001/0000 1001

	0200H(Code Mem)	0200H(Code Mem)
	0101 0101	0101 0101


71. MOVC A,@A+PC
    (Move code memory offset from Program counter to accumulator)

Instruction code:	1000 0011
Operation:	(PC)<-(PC)+1
 	(A)<-((A)+(PC))
Number of bytes:	1
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The program counter contents following an increment are added to the accumulator contents, and after temporary storage of the sum in the program counter, the ROM data contents specified by the program counter are stored in the accumulator. The program counter contents are then restored to former contents, and the flag is also updated.

Example:	MOVC A,@A+PC
Instruction code:	1000 0011

	Before execution	After execution

	Accumulator	Accumulator
	1110 0000	1110 1110

	Program counter	Program counter
	0000 0010/0010 0000	0000 0010/0010 0001

	0301H(Code Mem)	0301H(Code Mem)
	1110 1110	1110 1110

72. MOVX @DPTR,A
(Move accumulator to external memory addressed by data pointer)
Instruction code:	1111 0000
Operation:	((DPTR))<- (A)
Number of bytes:	1
Number of cycles:	2
Flags:	No
 (PSW)
Description: The accumulator contents are stored to external data memory (RAM) addressed by the data pointer contents.

Example:	MOVX @DPTR,A
Instruction code:	1111 0000

	Before execution	After execution

	DPH/DPL	DPH/DPL
	0110 0010/1100 1100	0110 0010/1100 1100

	62CCH(External Mem)	62CCH(External Mem)
	1011 1000	0000 0101

	Accumulator	Accumulator
	0000 0101	0000 0101

73. MOVX @Rr,A
(Move accumulator to external memory addressed by register)

Instruction code:	1111 001 r
Operation:	((Rr))<- (A)   r=0 or 1
Number of bytes:	1
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The accumulator contents are stored to external data memory (RAM) addressed by the register r contents.

Example:	MOVX @R0,A
Instruction code:	1111 0010

	Before execution	After execution

	Register 0	Register 0
	1010 0000	1010 0000

	0A0H(External Mem)	0A0H(External Mem)
	0011 0011	1011 1101

	Accumulator	Accumulator
	1011 1101	1011 1101



74. MOVX A,@DPTR
(Move external memory addressed by data pointer to accumulator)

Instruction code:	1110 0000
Operation:	(A)<- ((DPTR))
Number of bytes:	1
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description: 	External data memory (RAM) contents addressed by the data pointer are stored to the accumulator, and the flag is updated.

Example:	MOVX A,@DPTR
Instruction code:	1110 0000

	Before execution	After execution

	Accumulator	Accumulator
	1111 1111	1011 1010

	DPH/DPL	DPH/DPL
	0101 0111/1010 1111	0101 0111/1010 1111

	57AFH(External Mem)	57AFH(External Mem)
	1011 1010	1011 1010

75. MOVX A,@Rr 
      (Move external memory addressed by register to accumulator)

Instruction code:	1110 001 r
Operation:	(A)<-((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	External data memory (RAM) contents addressed by the register r contents are stored to the accumulator, and the flag is updated.

Example:	MOVX A,@R1
Instruction code:	1110 0011

	Before execution	After execution

	Accumulator	Accumulator
	0111 1010	0010 1000

	Register 1	Register 1
	1011 1110	1011 1110

	0BEH(External Mem)	0BEH(External Mem)
	0010 1000	0010 1000

76. MUL AB 
       (Multiply accumulator by B)

Instruction code:	1010 0100
Operation:	(B),(A) <- (A)*(B)
Number of bytes:	1
Number of cycles:	4
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?                   ?       ?
Description:	The accumulator contents are multiplied by the arithmetic operation register (B) contents. The operand is always handled as an integer without sign. The lower order byte of the result is stored in the accumulator, and the higher order byte is stored in the arithmetic operation register (B). The carry flag is always cleared. The overflow flag is set to 1 if the product is greater than 00FFH, and to 0 in all other cases.

Example:	MUL AB (6AH * 15H = 8B2H)
Instruction code:	1010 0100

	Before execution	After execution

	Accumulator	Accumulator
	0110 1010	1011 0010

	Register B	Register B
	0001 0101	0000 1000

	Overflow flag	Overflow flag
	   0	    1

77. NOP 
     (No operation)

Instruction code:	0000 0000
Operation:	(PC)<-(PC)+1
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The program counter is incremented by 1 without any other change in the CPU. Control is shifted to the next instruction.


78. ORL A,#data 
     (Logical OR immediate data to accumulator)

Instruction code: 	0100 0100
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(A) <- (A) OR #data
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The logical OR between an 8-bit immediate data value and the accumulator contents is determined. The result is stored in the accumulator and the flag is also updated.

Example:	ORL A,#5FH
Instruction code:	0100 0100/0101 1111

	Before execution	After execution

	Accumulator	Accumulator
	1000 0100	1101 1111

79. ORL A,@Rr 
       (Logical OR indirect address to accumulator)

Instruction code:	0100 011 r
Operation:	(A)<-(A) OR ((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The logical OR between the accumulator contents and the data memory location contents addressed by the register r contents is determined. The result is stored in the accumulator and the flag is also updated.

Example:	ORL A,@R0
Instruction code:	0100 0110

	Before execution	After execution

	Accumulator	Accumulator
	0001 1000	1011 1111

	Register 0	Register 0
	0110 1101	0110 1101

	6DH	6DH
	1010 0111	1010 0111



80. ORL A,Rr 
      (Logical OR register to accumulator)

Instruction code:	0100 1 r2 r1 r0
Operation:	(A)<-(A) OR (Rr)   r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The logical OR between the accumulator contents and the register r contents is determined. The result is stored in the accumulator and the flag is also updated.

Example:	ORL A,R5

Instruction code:	0100 1101

	Before execution	After execution

	Accumulator	Accumulator
	0000 0000	0111 0101

	Register 5	Register 5
	0111 0101	0111 0101

8l. ORL A,data address
    (Logical OR memory to accumulator)

Instruction code:	0100 0101/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <- (A) OR (data address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The logical OR between the accumulator contents and the specified data address contents is determined. The result is stored in the accumulator and the flag is also updated.

Example:	ORL A,33H
Instruction code:	0100 0101/0011 0011

	Before execution	After execution

	Accumulator	Accumulator
	0101 1110	1111 1111

	33H	33H
	1010 0101	1010 0101



82. ORL C,bit address 
     (Logical OR bit to carry flag)

Instruction code:	0111 0010/
 	b7 b6 b5 b4 b3 b2 b1 b0
Operation:	(C) <- (C) OR (bit address)
Number of bytes:	2
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?
Description:	The logical OR between the carry flag and the specified bit address content is determined. The result is stored in the carry flag.

Example:	ORL C,ACC.6
Instruction code:	0111 0010/1110 0110

	Before execution	After execution

	Carry flag	Carry flag
	   0	   1

	Accumulator	Accumulator
	0111 0010	0111 0010

83. ORL C,/bit address 
       (Logical OR complement of bit to carry flag)

Instruction code:	1010 0000/
 	b7 b6 b5 b4 b3 b2 b1 b0
Operation:	(C) <- (C) OR /(bit address)
Number of bytes:	2
Number of cycles:	2
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?
Description:	The logical OR between the carry flag and the complement of specified bit address content is determined. The result is stored in the carry flag.

Example:	ORL C,/25H.5
Instruction code:	1010 0000/0010 1101

	Before execution	After execution

	Carry flag	Carry flag
	   0	   1

	25H	25H
	1000 1010 	1000 1010



84. ORL data address,#data 
      (Logical OR immediate data to memory)

Instruction code:	0100 0011/
 	a7 a6 a5 a4 a3 a2 al a0/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(data address) -- (data address) OR #data
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The logical OR between an 8-bit immediate data value and the specified data address contents is determined. The result is stored in the specified data address.

Example:	ORL 55H,#11H
Instruction code:	0100 0011/0101 0101/0001 0001

	Before execution	After execution

	55H	55H
	1000 0100	1001 0101

85. ORL data address,A
      (Logical OR accumulator to memory)

Instruction code:	0100 0010/
 	a7 a6 a5 a4 a3 a2 al a0
Operation:	(data address) <- (data address) OR (A)
Number of bytes:	2
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The logical OR between the accumulator and the specified data address contents is determined. The result is stored in the specified data address.

Example:	ORL 50H,A
Instruction code:	0100 0010/0101 0000

	Before execution	After execution

	Accumulator	Accumulator
	1000 1111	1000 1111

	50H	50H
	0010 0101	1010 1111



86. POP data address 
    (Pop stack to memory)

Instruction code:	1101 0000/
 	a7 a6 a5 a4 a3 a2 al a0
Operation	(data address) <- ((SP))
 	(SP)- (SP)-1
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	Stack contents addressed by the stack pointer are transfered to the specified data address, and the stack pointer is decremented by 1.

Example:	POP PSW(No change to parity bit.)

Instruction code:	1101 0000/1101 0000

	Before execution	After execution

	Accumulator	Accumulator
	1010 1100	1010 1100

	PSW (0D0H)	PSW (0D0H)
	1010 1100	1111 0010

	Stack pointer	Stack pointer
	0001 0000	0000 1111
 
	10H	10H
	1111 0011	1111 0011

87. PUSH data address 
    (Push memory onto stack)

Instruction code:	1100 0000/
 	a7 a6 a5 a4 a3 a2 al a0
Operation:	(SP)<-(SP)+1
  	((SP)) <- (data address)
Number of bytes:	2
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The stack pointer is incremented by 1,and the specified data address contents are stored in the stack addressed by the stack pointer.

Example:	PUSH P1
Instruction code:	1100 0000/1001 0000

	Before execution	After execution

	Port 1(90H)	Port 1(90H)
	1101 0101	1101 0101

	Stack pointer	Stack pointer
	0001 0000	0001 0001

	11H (Stack)	11H (Stack)
	0000 0000	1101 0101



88. RET
      (Return from subroutine, non interrupt)

Instruction code:	0010 0010
Operation:	(PC8~15)<-((SP))
 	(SP)<-(SP)-1
 	(PC0~7)<- ((SP))
 	(SP)<-(SP)-1
Number of bytes:	1
Number of cycles:	2
Flags:	No
(PSW)
Description:	The stack contents addressed by the stack pointer are stored to upper order 8 thru 15 of the program counter, and the stack pointer is decremented by 1. Then the stack contents addressed by the updated stack pointer are stored in the lower order 0 thru 7 of the program counter, again decrementing the stack pointer by 1.The program counter is updated with the stack contents, and control is shifted to the address after updating.

89. RETI 
     (Return from interrupt routine)

Instruction code:	0011 0010
Operation:	(PC8~15)<-((SP))
 	(SP)<-(SP)-1
 	(PC0~7)<-((SP))
 	(SP)<- (SP)-1 
 	*INTERRUPT ENABLE
Number of bytes:	1
Number of cycles:	2
Flags:	No
 (PSW)
Description:	This return instruction functions as an interrupt processing routine terminating instruction. If a priority interrupt is generated while a non-priority interrupt processing routine is being executed, the CPU starts to process the priority interrupt. And once processing of this interrupt is started, no other interrupt can be processed until the RETI instruction is executed.

 	The stack contents addressed by the stack pointer are stored to upper order 8 thru 15 of the program counter, and the stack pointer is decremented by 1. Then the stack contents addressed by the updated stack pointer are stored in the lower order 0 thru 7 of the program counter, again decrementing the stack pointer by 1.The program counter is updated with the stack contents, and control is shifted to the address after updating. If a new interrupt is generated, the CPU starts to process the interrupt.



90. RL A 
    (Rotate accumulator left) 

Instruction code:	0010 0011
Operation:	ACC left rotate 1 bit
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	All accumulator bits are shifted by one bit to the left. The MSB (bit 7) is shifted to the LSB bit position (bit 0).

Example:	RL A
Instruction code:	0010 0011

	Before execution	After execution

	Accumulator	Accumulator
	1001 0110	0010 1101

91. RLC A 
    (Rotate accumulator and carry flag left)

Instruction code:	0011 0011
Operation:	C,ACC left rotate 1 bit
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?                           ?
Description:	The accumulator and the carry flag are connected, and all bits are shifted by one bit to the left. The carry flag is shifted to the accumulator LSB (bit 0), and the accumulator MSB (bit 7) is shifted to the carry flag.

Example:	RLC A

Instruction code:	0011 0011

	Before execution	After execution

	Accumulator	Accumulator
	0110 1011	1101 0111

	Carry flag	Carry flag
	   1	    0




92. RR A 
    (Rotate accumulator right)

Instruction code:	0000 0011
Operation:	ACC rotate right 1 bit
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	All accumulator bits are shifted by one bit to the right. The LSB (bit 0) is shifted to the MSB bit position (bit 7).

Example:	RR A
Instruction code:	0000 0011

	Before execution	After execution

	Accumulater	Accumulator
	0111 0011	1011 1001

93. RRC A 
   (Rotate accumulator and carry flag right)

Instruction code:	0001 0011
Operation:	C,ACC rotate right 1 bit
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?                           ?
Description:	The accumulator and the carry flag are connected, and all bits are shifted by one bit to the right. The carry flag is shifted to the accumulator MSB (bit 7), and the accumulator LSB (bit 0) is shifted to the carry flag.

Example:	RRC A
Instruction code:	0001 0011

	Before execution	After execution

	Accumulator	Accumulator
	0011 0100	1001 1010

	Carry flag	Carry flag
 	    1	   0





94. SETB C 
     (Set carry flag)

Instruction code:	1101 0011
Operation:	(C)<-l
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	1
Description:	The carry flag is set to 1.

Example:	SETB C
Instruction code:	1101 0011

	Before execution	After execution

	Carry flag	Carry flag
	   0 	   1

95. SETB bit address 
    (Set bit)

Instruction code:	1101 0010/
 	b7 b6 b5 b4 b3 b2 bl b0
Operation:	(bit address) <- 1
Number of bytes:	2
Number of cycles:	1
Flags:	No
(PSW)
Description:	The specified bit address content is set to 1.

Example:	SETB IE.7
Instruction code:	1101 0010/1010 1111

	Before execution	After execution

	IE (A8H) 	IE (A8H)
	0110 0l11	1110 0111


96. SJMP code address 
    (Short jump)

Instruction code:	1000 0000/
 	R7 R6 R5 R4 R3 R2 R1 R0
Operation:	(PC)<-(PC)+2
 	(PC)<- (PC) + relative offset
Number of bytes:	2
Number of cycles:	2
Flags:	No
(PSW)
Description	Relative offset jump data is added/subtracted to/from the program counter contents following an increment. The program counter contents are updated, and control is then shifted to the updated address. The range in which relative jumps can be executed by this instruction is +127 to -128 in respected to the incremented program counter contents. There is no page field restrictions.

Example:	SJMP CHECK

	LOC	OBJ 	SOURCE
	  .	  .	  .
	  .	  .	  .
	0111	8010	SJUMP: SJMP CHECK
	  .	  .	  .
	  .	  .	  .
	0123	33	CHECK: RLC A
	  .	  .	  .
	  .	  .	  .
Instruction code:	1000 0000/0001 0000

	Before execution	After execution

	Program counter	Program counter
	0000 0001/0001 0001	0000 0001/0010 0011

97. SUBB A,#data 
   (Subtract immediate data from accumulator with borrow)

Instruction code:	1001 0100/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(A) <- (A) - ((C) + #data)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?  ?                ?      ?
Description:	The carry flag contents and an immediate data value are subtracted from the accumulator contents. The result is placed in the accumulator, and the flags are updated.

Example:	SUBB A,#05H
Instruction code:1001 0100/0000 0101

	Before execution	After execution

	Carry flag	Carry flag
	   1	   0

	Auxiliary carry flag	Auxiliary carry flag
	   0 	   0

	Overflow flag	Overflow flag
	   1	   0

	Accumulator	Accumulator
	1010 1001	1010 0011


98. SUBB A,@Rr 
   (Subtract indirect address from accumulator with borrow)

Instruction code:	1001 011 r
Operation:	(A) <- (A) -((C)+((Rr)))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?  ?               ?      ?
Description:	The carry flag contents, and the data memory location contents addressed by the register r contents are subtracted from the accumulator contents. The result is placed in the accumulator, and the flags are updated.

Example:	SUBB A,@R0
Instruction code:	1001 0110

	Before execution	After execution

	Carry flag	Carry flag
	   0	   1

	Auxiliary carry flag	Auxiliary carry flag
	    0	   0

	Overflow flag	Overflow flag
	    0	   1

	Register 0	Register 0	
	0100 0111	0100 0111

	47H	47H
	1101 0010	1101 0010

	Accumulator	Accumulator
	0101 0100	1000 0010

99. SUBB A,Rr
  (Subtract register from accumulator with borrow)

Instruction code:	1001 1 r2 r1 r0
Operation:	(A) <- (A)-((C)+(Rr))
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	?  ?                ?       ?
Description:	The carry flag contents and the register r contents are subtracted from the accumulator contents. The result is  placed  in  the  accumulator,  and  the  flags  are updated.

Example:	SUBB A,R7
Instruction code:	1001 1111

	Before execution	After execution

	Carry flag	Carry flag
	  1	   0

	Auxiliary carry flag	Auxiliary carry flag
	   0	   1

	Overflow flag	Overflow flag
	   0	   1

	Register 7	Register 7
	0101 1000	0101 1000

	Accumulator	Accumulator
	1000 0100	0010 1011

100. SUBB A,data address 
  (Subtract memory from accumulator with borrow)

Instruction code:	1001 0101/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <- (A) - ((C) + (data address))
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	?  ?                ?      ?
Description:	The carry flag contents and the specified data address contents are subtracted from the accumulator contents. The result is placed in the accumulator, and the flags are updated.

Example:	SUBB A,DPH
Instruction code:	1001 0101/1000 0011

	Before execution	After execution

	Carry flag	Carry flag
	   0	   1

	Auxiliary carry flag	Auxiliary carry flag
	   0	   1

	Overflow flag	Overflow flag
	   0	   0

	DPH	DPH
	1010 1010	1010 1010

	Accumulator	Accumulator
	0101 0101	1010 1011



101. SWAP A 
  (Exchange nibble in accumulator)

Instruction code:	1100 0100
Operation:	(A4~7)<->(A0~3)
Number of bytes:	1
Number of cycles:	1
Flags:	No
 (PSW)
Description:	The contents of the four higher order bits (4 thru 7) of the accumulator are exchanged with the contents of the four lower order bits (0 thru 3).

Example:	SWAP A
Instruction code:	1100 0100

	Before execution	After execution

	Accumulator	Accumulator
	1011 0100	0100 1011

102. XCH A,@Rr 
   (Exchange indirect address with accumulator)

Instruction code:	1100 011 r
Operation:	(A)<->((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The accumulator contents are exchanged with the data memory location contents addressed by the register r contents, and the flag is updated.

Example:	XCH A,@R0 
Instruction code:	1100 0110

	Before execution	After execution

	Accumulator	Accumulator
	1001 1100	0111 0110

	Register 0	Register 0
	0100 1011	0100 1011

	4BH	4BH
	0111 0110	1001 1100



103. XCH A,Rr
   (Exchange register with accumulator)

Instruction code:	1100 1 r2 r1 r0
Operation:	(A)<->(Rr)  r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The accumulator contents are exchanged with the register r contents, and the flag is updated.

Example:	XCH  A,R5 
Instruction code:	1100 1101

	Before execution	After execution

	Accumulator	Accumulator
	0111 0010	1010 0001

	Register 5	Register 5
	1010 0001	0111 0010

104. XCH A,data address
   (Exchange memory with accumulator)

Instruction code:	1100 0101/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <-> (data address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The accumulator contents are exchanged with the specified data address contents, and the flag is updated.

Example:	XCH A,7AH
Instruction code:	1100 0101/0111 1010

	Before execution	After execution

	Accumulator	Accumulator
	1011 1101	1101 1100

	7AH	7AH
	1101 1100	1011 1101



105. XCHD A,@Rr 
    (Exchange low nibbles of indirect address with accumulator)

Instruction code:	1101 011 r
Operation:	(A0~3)= ((Rr)0~3) r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
(PSW)	                            ?
Description:	The lower order bits (0 thru 3) of the accumulator contents are exchanged with the contents of the lower order bits (0 thru 3) of the data memory location addressed by register r contents. The flag is updated.

Example:	XCHD A,@R0
Instruction code:	1101 0110

	Before execution	After execution

	Accumulator	Accumulator
	1111 0110	1111 1101

	Register 0	Register 0
	0110 0000	0110 0000

	60H	60H
	0000 1101	0000 0110

106. XRL A,#data 
     (Logical exclusive OR immediate data to accumulator)

Instruction code:	0110 0100/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(A) <- (A) XOR #data
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The exclusive OR operation is executed between an immediate data value and the accumulator contents. The result is placed in the accumulator, and the flag is updated.

Example:	XRL A,#15H
Instruction code:	0110 0100/0001 0101

	Before execution	After execution

	Accumulator	Accumulator
	0100 1010	0101 1111



107. XRL A,@Rr 
    (Logical exclusive OR indirect address to accumulator) 

Instruction code:	0110 011 r
Operation:	(A) <-(A) XOR ((Rr))   r=0 or 1
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The exclusive OR operation is executed between the accumulator contents and the data memory location contents addressed by the register r contents. The result is placed in the accumulator, and the flag is updated.

Example:	XRL A,@R1
Instruction code:	0110 0111

	Before execution	After execution

	Accumulator	Accumulator
	0100 1001	1101 1000

	Register 1	Register 1
	0011 0110	0011 0110

	36H	36H
	1001 0001	1001 0001

108. XRL A,Rr 
   (Logical exclusive OR register to accumulator)

Instruction code:	0110 1 r2 r1 r0
Operation:	(A)<-(A) XOR (Rr)  r=0~7
Number of bytes:	1
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The exclusive OR between the accumulator contents and the register r contents is determined. The result is stored in the accumulator and the flag is also updated.

Example:	XRL A,R3
Instruction code:	0110 1011

	Before execution	After execution

	Accumulator	Accumulator
	1010 0010	1000 0111

	Register 3	Register 3
	0010 0101	0010 0101


109. XRL A,data address 
    (Logical exclusive OR memory to accumulator)

Instruction code:	0110 0101/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(A) <- (A) XOR (data address)
Number of bytes:	2
Number of cycles:	1
Flags:	C  AC F0 RS1 RS0 OV Fl  P
 (PSW)	                            ?
Description:	The exclusive OR between the accumulator contents and the specified data address contents is determined. The result is stored in the accumulator and the flag is updated.

Example:	XRL A,70H

Instruction code:	0110 0101/0111 0000

	Before execution	After execution

	Accumulator	Accumulator
	1111 0110	1101 1001

	70H	70H
	0010 1111	0010 1111

110. XRL data address,#data 
    (Logical exclusive OR immediate data to memory)

Instruction code:	0110 0011/
 	a7 a6 a5 a4 a3 a2 al a0/
 	I7 I6 I5 I4 I3 I2 I1 I0
Operation:	(data address) <- (data address) XOR #data
Number of bytes:	3
Number of cycles:	2
Flags:	No
 (PSW)
Description:	The exclusive OR between an immediate data value and the specified data address contents is determined. The result is stored in the specified data address.

Example:	XRL ACC,#5AH
Instruction code:	0110 0011/1110 0000/0101 1010

	Before execution	After execution

	Accumulator	Accumulator
	1111 1010	1010 0000




111. XRL data address,A 
    (Logical exclusive OR accumulator to memory) 

Instruction code:	0110 0010/
 	a7 a6 a5 a4 a3 a2 a1 a0
Operation:	(data address) <- (data address) XOR (A)
Number of bytes:	2
Number of cycles:	1
Flags:	No
(PSW)
Description:	The exclusive OR between the accumulator and the specified data address contents is determined. The result is stored in the specified data address.

Example:	XRL 20H,A 
Instruction code:	0110 0010/0010 0000

	Before execution	After execution

	Accumulator	Accumulator
	0111 0101	0111 0101

	20H	20H
	1101 0011	1010 0110

